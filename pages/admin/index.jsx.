// /pages/admin/index.jsx
"use client";
import React from "react";
import { db } from "@/lib/firebase";
import {
  collection, query, where, orderBy, limit,
  getCountFromServer, getDocs, updateDoc, doc, serverTimestamp,
  startAt, endAt
} from "firebase/firestore";
import { getAuth, onAuthStateChanged } from "firebase/auth";

// Basit kart / satır bileşenleri
function Card({title, value, href}) {
  return (
    <a href={href} style={{textDecoration:"none"}}>
      <div style={{background:"#fff",border:"1px solid #e5e7eb",borderRadius:12,padding:16}}>
        <div style={{fontSize:13,color:"#475569"}}>{title}</div>
        <div style={{fontSize:28,fontWeight:800,color:"#0f172a"}}>{value}</div>
      </div>
    </a>
  );
}
function Row({children}) {
  return <div style={{display:"flex", alignItems:"center", gap:12, padding:10, border:"1px solid #e5e7eb", borderRadius:10}}>{children}</div>;
}
function Empty({text}) { return <div style={{marginTop:8, color:"#64748b", fontSize:14}}>{text}</div>; }

export default function AdminHome(){
  // 1) Yerel admin kilidi (bizim /admin/login ile gelen bayrak)
  const [localAdmin, setLocalAdmin] = React.useState(false);
  React.useEffect(()=>{ try{ setLocalAdmin(localStorage.getItem("ue_admin_auth")==="ok"); }catch{} },[]);
  if (typeof window !== "undefined" && !localAdmin) { window.location.replace("/admin/login/"); return null; }

  // 2) Firebase admin rolü (kurallar için gerekli)
  const [ready, setReady] = React.useState(false);
  const [role, setRole]   = React.useState(null);
  const isAdminFB = role === "admin";

  React.useEffect(()=>{
    const auth = getAuth();
    const stop = onAuthStateChanged(auth, async (u)=>{
      try{
        if (!u) { setRole(null); setReady(true); return; }
        const snap = await (await import("firebase/firestore")).getDoc(doc(db,"users", u.uid));
        setRole(snap.exists() ? snap.data()?.role || null : null);
      }catch{ setRole(null); } finally{ setReady(true); }
    });
    return () => stop();
  },[]);

  // 3) Sayaçlar
  const [stats, setStats] = React.useState({
    orders:"—", pendingListings:"—", openSupport:"—", pendingPayments:"—", newUsers:"—"
  });
  React.useEffect(() => {
    if (!isAdminFB) return; // Firebase admin değilken sorgu atma
    let alive = true;
    (async () => {
      try {
        const seven = new Date(Date.now()-7*24*3600*1000);
        const [o,l,s,p,u] = await Promise.all([
          getCountFromServer(collection(db,"orders")),
          getCountFromServer(query(collection(db,"listings"), where("status","==","pending"))),
          getCountFromServer(query(collection(db,"conversations"), where("status","==","open"))),
          getCountFromServer(query(collection(db,"payments"), where("status","==","pending_admin"))),
          getCountFromServer(query(collection(db,"users"), where("created_at", ">=", seven)))
        ]);
        if (!alive) return;
        setStats({
          orders:o.data().count,
          pendingListings:l.data().count,
          openSupport:s.data().count,
          pendingPayments:p.data().count,
          newUsers:u.data().count
        });
      } catch(e){ console.error("admin/home counters", e); }
    })();
    return ()=>{ alive=false; };
  }, [isAdminFB]);

  // 4) Listeler
  const [pendingListings, setPendingListings] = React.useState([]);
  const [openSupports, setOpenSupports] = React.useState([]);
  const [pendingPayments, setPendingPayments] = React.useState([]);
  const [recentOrders, setRecentOrders] = React.useState([]);

  React.useEffect(()=>{ (async()=>{
    if (!isAdminFB) return;
    try {
      const qsL = await getDocs(query(collection(db,"listings"), where("status","==","pending"), orderBy("created_at","desc"), limit(5)));
      setPendingListings(qsL.docs.map(d=>({id:d.id, ...d.data()})));

      const qsS = await getDocs(query(collection(db,"conversations"), where("status","==","open"), orderBy("updated_at","desc"), limit(5)));
      setOpenSupports(qsS.docs.map(d=>({id:d.id, ...d.data()})));

      const qsP = await getDocs(query(collection(db,"payments"), where("status","==","pending_admin"), orderBy("created_at","desc"), limit(5)));
      setPendingPayments(qsP.docs.map(d=>({id:d.id, ...d.data()})));

      const qsO = await getDocs(query(collection(db,"orders"), orderBy("created_at","desc"), limit(10)));
      setRecentOrders(qsO.docs.map(d=>({id:d.id, ...d.data()})));
    } catch(e){ console.error("admin/home lists", e); }
  })(); }, [isAdminFB]);

  // 5) Aksiyonlar (sadece Firebase admin)
  async function needAdmin(){ if(!isAdminFB){ alert("Bu işlem için siteye giriş yap (admin)."); return true; } return false; }

  async function approveListing(l) {
    if (await needAdmin()) return;
    try {
      await updateDoc(doc(db,"listings", l.id), { status:"approved", approved_by:"admin", approved_at:serverTimestamp() });
      setPendingListings(rows=>rows.filter(x=>x.id!==l.id));
      alert("İlan onaylandı.");
    } catch(e){ console.error(e); alert("Onaylanamadı."); }
  }
  async function rejectListing(l) {
    if (await needAdmin()) return;
    try {
      await updateDoc(doc(db,"listings", l.id), { status:"rejected", approved_by:"admin", approved_at:serverTimestamp() });
      setPendingListings(rows=>rows.filter(x=>x.id!==l.id));
      alert("İlan reddedildi.");
    } catch(e){ console.error(e); alert("Reddedilemedi."); }
  }
  async function toggleShowcase(listingId, nextVal) {
    if (await needAdmin()) return;
    try {
      await updateDoc(doc(db,"listings", listingId), { is_showcase: !!nextVal, updated_at: serverTimestamp() });
      alert(nextVal ? "Vitrine alındı." : "Vitrinden düşürüldü.");
    } catch(e){ console.error(e); alert("Vitrin güncellenemedi."); }
  }
  async function approvePayment(p) {
    if (await needAdmin()) return;
    try {
      await updateDoc(doc(db,"payments", p.id), { status:"approved", approved_at:serverTimestamp(), approved_by:"admin" });
      if (p.type === "premium" && p.user_id) {
        try { await updateDoc(doc(db,"users", p.user_id), { premium:true, premium_at:serverTimestamp() }); } catch{}
      }
      if (p.type === "vitrine" && p.listing_id) {
        try { await updateDoc(doc(db,"listings", p.listing_id), { is_showcase:true, updated_at:serverTimestamp() }); } catch{}
      }
      setPendingPayments(rows=>rows.filter(x=>x.id!==p.id));
      alert("Ödeme onaylandı.");
    } catch(e){ console.error(e); alert("Ödeme onaylanamadı."); }
  }
  async function rejectPayment(p) {
    if (await needAdmin()) return;
    try {
      await updateDoc(doc(db,"payments", p.id), { status:"rejected", approved_at:serverTimestamp(), approved_by:"admin" });
      setPendingPayments(rows=>rows.filter(x=>x.id!==p.id));
      alert("Ödeme reddedildi.");
    } catch(e){ console.error(e); alert("Ödeme reddedilemedi."); }
  }
  async function grantPremium(uid) {
    if (await needAdmin()) return;
    try {
      await updateDoc(doc(db,"users", uid), { premium:true, premium_at:serverTimestamp() });
      alert("Premium verildi.");
    } catch(e){ console.error(e); alert("Premium verilemedi."); }
  }

  // 6) Kullanıcı arama
  const [userHits, setUserHits] = React.useState([]);
  async function runUserSearch(termRaw) {
    const term = (termRaw||"").trim();
    setUserHits([]);
    if (!isAdminFB) { alert("Arama için siteye admin olarak giriş yap."); return; }
    if (term.length < 2) return;
    try {
      const hits = [];
      // email
      try {
        const qsE = await getDocs(query(collection(db,"users"), where("email","==", term)));
        qsE.forEach(d=>hits.push({id:d.id, ...d.data()}));
      } catch {}
      // handle (@name)
      try {
        const uname = term.startsWith("@") ? term.slice(1) : term;
        const qsH = await getDocs(query(collection(db,"users"), where("handle","==", uname)));
        qsH.forEach(d=>{ if(!hits.find(x=>x.id===d.id)) hits.push({id:d.id, ...d.data()}); });
      } catch {}
      // ad-soyad prefix
      try {
        const qsN = await getDocs(query(collection(db,"users"), orderBy("full_name"), startAt(term), endAt(term+"\uf8ff")));
        qsN.forEach(d=>{ if(!hits.find(x=>x.id===d.id)) hits.push({id:d.id, ...d.data()}); });
      } catch {}
      setUserHits(hits.slice(0,10));
    } catch(e){ console.error(e); }
  }

  return (
    <div style={{maxWidth:1100, margin:"40px auto", padding:"16px", fontFamily:"system-ui"}}>
      <h1 style={{fontSize:28, fontWeight:800, margin:"0 0 8px"}}>Admin Home</h1>

      {!isAdminFB && (
        <div style={{margin:"8px 0 12px", padding:12, border:"1px dashed #94a3b8", borderRadius:12, background:"#f8fafc"}}>
          <div style={{fontWeight:700}}>Verileri görmek ve işlem yapmak için siteye admin olarak giriş yap.</div>
          <a href="/login?next=/admin/" style={{display:"inline-block", marginTop:8, background:"#111827", color:"#fff",
            border:"1px solid #111827", padding:"8px 12px", borderRadius:10, fontWeight:800, textDecoration:"none"}}>Giriş Yap</a>
        </div>
      )}

      {/* Hızlı Bakış */}
      <div style={{display:"grid",gridTemplateColumns:"repeat(auto-fit,minmax(220px,1fr))",gap:12, marginTop:12}}>
        <Card title="Toplam Sipariş" value={stats.orders} href="/admin/orders" />
        <Card title="Onay Bekleyen İlan" value={stats.pendingListings} href="/admin/listings" />
        <Card title="Açık Destek" value={stats.openSupport} href="/admin/support" />
        <Card title="Bekleyen Ödeme" value={stats.pendingPayments} href="/admin/moderation" />
        <Card title="Yeni Kullanıcı (7g)" value={stats.newUsers} href="/admin/users" />
      </div>

      {/* Kullanıcı arama */}
      <section style={{marginTop:16, padding:12, background:"#fff", border:"1px solid #e5e7eb", borderRadius:12}}>
        <div style={{fontWeight:800, marginBottom:8}}>Kullanıcı Ara</div>
        <div style={{display:"flex", gap:8, alignItems:"center", flexWrap:"wrap"}}>
          <input
            placeholder="email, @kullanici, ad soyad (en az 2 harf)"
            onKeyDown={(e)=>{ if(e.key==="Enter") runUserSearch(e.currentTarget.value); }}
            style={{flex:"1 1 260px", border:"1px solid #cbd5e1", borderRadius:10, padding:"8px 10px"}}
          />
          <button onClick={()=>{
            const el = document.querySelector("input[placeholder^='email']");
            if(el) runUserSearch(el.value||"");
          }} style={{border:"1px solid #111827", background:"#111827", color:"#fff", borderRadius:10, padding:"8px 12px", fontWeight:800}}>
            Ara
          </button>
        </div>
        {!!userHits.length && (
          <div style={{marginTop:12, display:"grid", gap:8}}>
            {userHits.map(u=>(
              <div key={u.id} style={{display:"flex", gap:8, alignItems:"center", border:"1px solid #e5e7eb", borderRadius:10, padding:8}}>
                <div style={{fontWeight:700}}>{u.full_name || u.handle || u.email || u.id}</div>
                <div style={{color:"#64748b"}}>{u.email}</div>
                {u.premium && <span style={{marginLeft:8, fontSize:12, background:"#fef3c7", color:"#92400e", border:"1px solid #fcd34d", borderRadius:999, padding:"2px 8px"}}>Premium</span>}
                <div style={{marginLeft:"auto", display:"flex", gap:8}}>
                  {/* “Profili Aç” — mevcut herkese açık profil sayfan yoksa /owner-setup veya /portal/seller’e götürür */}
                  <a href={`/portal/seller`} style={{border:"1px solid #334155", borderRadius:8, padding:"6px 10px"}}>Profili Aç</a>
                  {!u.premium && <button onClick={()=>grantPremium(u.id)} style={{border:"1px solid #065f46", background:"#065f46", color:"#fff", borderRadius:8, padding:"6px 10px"}}>Premium Ver</button>}
                </div>
              </div>
            ))}
          </div>
        )}
      </section>

      {/* İlan Onay Kuyruğu */}
      <section style={{background:"#fff", border:"1px solid #e5e7eb", borderRadius:12, padding:12, marginTop:12}}>
        <div style={{display:"flex", alignItems:"center", gap:8}}>
          <div style={{fontWeight:800}}>İlan Onay Kuyruğu</div>
          <a href="/admin/listings" style={{marginLeft:"auto", fontSize:13}}>Tümünü gör →</a>
        </div>
        {!pendingListings.length ? <Empty text="Bekleyen ilan yok."/> : (
          <div style={{marginTop:8, display:"grid", gap:8}}>
            {pendingListings.map(l=>(
              <Row key={l.id}>
                <div style={{fontWeight:700}}>{l.title || l.id}</div>
                <div style={{color:"#64748b"}}>{l.price ? `${l.price} ${l.currency||"TRY"}` : ""}</div>
                <div style={{marginLeft:"auto", display:"flex", gap:8}}>
                  <button onClick={()=>approveListing(l)} className="btn-approve">Onayla</button>
                  <button onClick={()=>rejectListing(l)} className="btn-reject">Reddet</button>
                  <button onClick={()=>toggleShowcase(l.id, true)} className="btn-outline">Vitrine al</button>
                  <button onClick={()=>toggleShowcase(l.id, false)} className="btn-outline">Vitrinden düşür</button>
                </div>
              </Row>
            ))}
          </div>
        )}
      </section>

      {/* Açık Destek */}
      <section style={{background:"#fff", border:"1px solid #e5e7eb", borderRadius:12, padding:12, marginTop:12}}>
        <div style={{display:"flex", alignItems:"center", gap:8}}>
          <div style={{fontWeight:800}}>Açık Destek Talepleri</div>
          <a href="/admin/support" style={{marginLeft:"auto", fontSize:13}}>Tümünü gör →</a>
        </div>
        {!openSupports.length ? <Empty text="Açık destek bulunmuyor."/> : (
          <div style={{marginTop:8, display:"grid", gap:8}}>
            {openSupports.map(c=>(
              <Row key={c.id}>
                <div style={{fontWeight:700}}>{c.subject || c.id}</div>
                <div style={{color:"#64748b"}}>{Array.isArray(c.participants)? c.participants.join(", ") : ""}</div>
                <div style={{marginLeft:"auto"}}>
                  <a href={`/admin/support?conv=${c.id}`} className="btn-outline">Görüntüle</a>
                </div>
              </Row>
            ))}
          </div>
        )}
      </section>

      {/* Bekleyen Ödemeler */}
      <section style={{background:"#fff", border:"1px solid #e5e7eb", borderRadius:12, padding:12, marginTop:12}}>
        <div style={{display:"flex", alignItems:"center"}}><div style={{fontWeight:800}}>Bekleyen Ödemeler</div><a href="/admin/moderation" style={{marginLeft:"auto", fontSize:13}}>Tümünü gör →</a></div>
        {!pendingPayments.length ? <Empty text="Bekleyen ödeme yok."/> : (
          <div style={{marginTop:8, display:"grid", gap:8}}>
            {pendingPayments.map(p=>(
              <Row key={p.id}>
                <div style={{fontWeight:700}}>{p.type === "premium" ? "Premium" : "Vitrine"}</div>
                <div style={{color:"#64748b"}}>{p.user_id} • {p.amount} {p.currency||"TRY"}</div>
                <div style={{marginLeft:"auto", display:"flex", gap:8}}>
                  <button onClick={()=>approvePayment(p)} className="btn-approve">Onayla</button>
                  <button onClick={()=>rejectPayment(p)} className="btn-reject">Reddet</button>
                </div>
              </Row>
            ))}
          </div>
        )}
      </section>

      {/* Son Siparişler */}
      <section style={{background:"#fff", border:"1px solid #e5e7eb", borderRadius:12, padding:12, marginTop:12}}>
        <div style={{display:"flex", alignItems:"center"}}><div style={{fontWeight:800}}>Son Siparişler</div><a href="/admin/orders" style={{marginLeft:"auto", fontSize:13}}>Tümü →</a></div>
        {!recentOrders.length ? <Empty text="Sipariş yok."/> : (
          <div style={{marginTop:8, display:"grid", gap:8}}>
            {recentOrders.map(o=>(
              <Row key={o.id}>
                <div style={{fontWeight:700}}>{o.id}</div>
                <div style={{color:"#64748b"}}>{o.buyer_uid} → {o.seller_uid}</div>
                <div style={{marginLeft:"auto"}}>{o.amount ? `${o.amount} ${o.currency||"TRY"}` : ""}</div>
              </Row>
            ))}
          </div>
        )}
      </section>

      <style>{`
        .btn-approve{border:1px solid #065f46;background:#065f46;color:#fff;border-radius:8px;padding:6px 10px;font-weight:800}
        .btn-reject{border:1px solid #7f1d1d;background:#991b1b;color:#fff;border-radius:8px;padding:6px 10px;font-weight:800}
        .btn-outline{border:1px solid #334155;background:#fff;color:#111827;border-radius:8px;padding:6px 10px;font-weight:700}
      `}</style>
    </div>
  );
}
